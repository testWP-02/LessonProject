@page "/people/search"
@inject IPersonRepository _repository
@inject NavigationManager navigationManager

<div>
    <h3>Search Person</h3>
    <EditForm Model="filteritemDTO">
        <div class="form-inline">
            <div class="form-group mb-2">
                <label for="name" class="sr-only">Name</label>
                <input type="text" class="form-control" id="name" placeholder="Person Name"
                       @bind-value="filteritemDTO.Title" @bind-value:event="oninput"
                       @onkeypress="@((KeyboardEventArgs e) => NameKeyPress(e))" />
            </div>

            <div class="form-group mx-sm-3 mb-2">
                <input type="checkbox" class="form-check-input" id="inwork" @bind="filteritemDTO.InWork" />
                <label class="form-check-label" for="upcomingReleases">
                    In Work
                </label>
            </div>

            <button type="button" class="btn btn-success mb-2 mx-sm-3" @onclick="SearchForItem">Search</button>
            <button type="button" class="btn btn-warning mb-2" @onclick="Clear">Clear</button>

        </div>
    </EditForm>

    <PeopleList People="person"></PeopleList>

    <Pagination CurrentPage="filteritemDTO.Page" TotaPagesQuantity="totalAmountPages" SelectedPage="SelectedPage"></Pagination>
</div>
@code {
    private List<Person> person;

    private List<Category> Categories = new List<Category>();
    private int totalAmountPages;
    private FilterItemDTO filteritemDTO = new FilterItemDTO();

    protected async override Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);

        if (queryStrings != null)
        {
            FilterWithQueryStrings(queryStrings);
        }

        await LoadItem();
    }

    private void FilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("title"))
        {
            filteritemDTO.Title = queryStrings["title"];
        }
        if (queryStrings.ContainsKey("inwork"))
        {
            filteritemDTO.InWork = bool.Parse(queryStrings["inwork"]);
        }
        if (queryStrings.ContainsKey("page"))
        {
            filteritemDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        filteritemDTO.Page = page;
        await LoadItem();
    }

    private async Task LoadItem()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("people/search" + queryString);
        }
        var paginatedResponse = await _repository.GetPeopleFiltered(filteritemDTO);
        person = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task NameKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForItem();
        }
    }

    private async Task SearchForItem()
    {
        await LoadItem();
    }

    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["categoryId"] = filteritemDTO.CategoryId.ToString();
        queryStringsDict["title"] = filteritemDTO.Title ?? "";
        queryStringsDict["inwork"] = filteritemDTO.InWork.ToString();
        queryStringsDict["page"] = filteritemDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringsDict.Where(x => !defaultValue.Contains(x.Value.ToLower())).
                      Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task Clear()
    {
        filteritemDTO.Title = "";
        filteritemDTO.CategoryId = 0;
        filteritemDTO.InWork = false;

        await LoadItem();
    }
}
