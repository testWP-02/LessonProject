@page "/news/{NewsId:int}"

@inject INewsRepository _context
@inject IRatingRepository _ratingRepository
@inject IDisplayMessage displayMessage

@if (model == null)
{
    <h5 class="text-center">Loading...</h5>
}
else
{
    <div class="m-1 p-1">
        <h3 class="text-center">@model.News.TitleBrif</h3> <p>@model.News.ReleaseDate.Value.ToString("dd MMM yyyy")</p>

        @*<text> | Average: </text> @model.AverageVote.ToString("0.#") <text>/5 (@model.UserVote.ToString().Count())| Your vote: </text>
        <Rating MaximumRating="5" SelectedRating="model.UserVote" OnVote="OnVote" />*@

        <div class="card">
            @*<img src="@model.News.Poster" class="card-img-top" alt="...">*@
            <div style="display: flex">
                <span style="display: inline-block">
                    <img src="@model.News.Poster" class="card-img-top" alt="...">
                    <iframe width="560" height="315" src="https://www.youtube.com/embed/@model.News.Video" frameborder="0"></iframe>
                </span>
            </div>
            <div class="card-body">
                <h5 class="card-title">Description</h5>
                <p class="card-text">@model.News.NewsData</p>
            </div>
            <ul class="list-group list-group-flush">
                @for (int i = 0; i < model.Categories.Count; i++)
                {
                    <li class="list-group-item">@linkCategory(model.Categories[i])</li>
                }
            </ul>
            <div class="card-body">
                <a href="/news/search" class="btn btn-sm btn-outline-warning">Back</a>
            </div>
        </div>
        <div class="card">
            <h3>Managers</h3>
            <div style="display:flex; flex-direction:column">
                @foreach (var manager in model.Managers)
                {
                    <div style="margin-bottom: 2px">
                        <img style="height: 100px; width: 100px;" src="@manager.Photo" />
                        <span style="display:inline-block; width: 200px;">
                            <a class="btn btn-sm btn-outline-secondary" href="/person/@manager.Id">@manager.Name</a>
                        </span>
                        <span style="display:inline-block; width: 45px;">
                            ...
                        </span>
                        <span>
                            @manager.Position
                        </span>
                    </div>
                }
            </div>
        </div>
        <div class="card">
            <h3>Images</h3>
            <div style="display:flex; flex-direction:column">
                @foreach (var image in model.Images)
                {
                    @*<div style="margin-bottom: 2px">
                            <img style="height: 300px; width: 300px;" src="@image.Picture" />
                            <span style="display:inline-block; width: 200px;">
                                <a class="btn btn-sm btn-outline-secondary" href="/person/@image.Id/@image.Name.Replace(" ", "-")">@image.Name</a>
                            </span>
                            <span style="display:inline-block; width: 45px;">
                                ...
                            </span>
                            <span>
                                @image.ImagesCharacter
                            </span>
                            <a href="//images" class="btn btn-sm btn-outline-success">Images Panel</a>
                        </div>*@

                    @*<div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img src="@image.Picture" class="d-block w-100" alt="...">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>*@

                    <div class="card-deck">
                        <div class="card">
                            <img src="@image.Picture" style="height:300px;width:300px;" class="card-img-top" alt="...">
                            <div class="card-body">
                                <h5 class="card-title">Image Description</h5>
                                @if (image.DateOfUpload.Value == null)
                                {
                                    <p class="card-text">@image.Name</p>
                                }
                                else
                                {
                                    <p class="card-text">@image.Name - @image.DateOfUpload.Value.ToString("dd MMM yyyy")</p>
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int NewsId { get; set; }
    [Parameter] public string ItemName { get; set; }
    DetailsNewsDTO model;
    private RenderFragment<Category> linkCategory = (category) =>@<a class="btn btn-sm btn-outline-info" href="news/search?categoryId=@category.Id">@category.Name</a>;

    protected async override Task OnInitializedAsync()
    {
        model = await _context.GetDetailsNewsDTO(NewsId);
    }

    private async Task OnVote(int selectedRate)
    {
        model.UserVote = selectedRate;
        var newsRating = new NewsRating() { Rate = selectedRate, NewsId = NewsId };
        await _ratingRepository.Vote(newsRating);
        await displayMessage.DisplaySuccessMessage("Your vote have been received!");
    }

}
